// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id                     String      @id @default(uuid())
  name                   String
  slug                   String      @unique @default(uuid())
  imagePath              String
  priceInCents           Int
  color                  String?
  description            String
  category               String[]    @default(["all"])
  isAvailableForPurchase Boolean     @default(false)
  paystack_product_code  String?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  orderItems             OrderItem[]
  images                 Image[]
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model User {
  id            String    @id @default(cuid())
  role          Role      @default(BASIC)
  email         String    @unique
  verifiedEmail Boolean   @default(false)
  firstName     String    @default("")
  lastName      String?
  password      String?
  phoneNumber   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  addresses     Address[]
  Token         Token[]
}

enum Role {
  BASIC
  ADMIN
}

model Order {
  id                   String        @id @default(uuid())
  fullName             String? // only if user is not logged in or ordering as a guest.
  userId               String?
  user                 User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalPriceInCents    Decimal
  shippingFeeInCents   Decimal       @default(0)
  taxRate              Float?
  taxesPaid            Decimal?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  status               orderStatus   @default(CREATED)
  paymentStatus        paymentStatus @default(PENDING)
  phoneNumber          String
  orderEmail           String
  trxref               String        @unique
  deliveryNote         String?
  paystackCheckoutCode String?

  orderItems            OrderItem[]
  FulfillmentType       FulfillmentType @default(PICKUP)
  pickUpPersonFirstName String?
  pickUpPersonLastName  String?

  trackingId String?
  tracking   TrackingInfo? @relation(fields: [trackingId], references: [id])

  paymentInfoId String?
  paymentInfo   PaymentInfo? @relation(fields: [paymentInfoId], references: [id])

  billingAddressId String?
  billingAddress   Address? @relation("BillingAddress", fields: [billingAddressId], references: [id])

  shippingAddressId String?
  shippingAddress   Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
}

enum orderStatus {
  CREATED
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELED
  REFUNDED
}

enum paymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum FulfillmentType {
  PICKUP
  SHIPPING
}

model OrderItem {
  id           String  @id @default(uuid())
  quantity     Int
  priceInCents Int
  productId    String
  product      Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  orderId      String
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Address {
  id      String  @id @default(uuid())
  address String
  state   String
  country String
  zipCode String?
  userId  String?
  user    User?   @relation(fields: [userId], references: [id])

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  shippingOrders Order[]  @relation("ShippingAddress")
  billingOrders  Order[]  @relation("BillingAddress")
}

model PaymentInfo {
  id              String @id @default(uuid())
  cardNumberLast4 String
  cardType        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model TrackingInfo {
  id             String         @id @default(cuid())
  courierName    String
  trackingNumber String?
  status         TrackingStatus
  lastUpdated    DateTime       @default(now())
  driverName     String?
  Order          Order[]
}

enum TrackingStatus {
  IN_TRANSIT
  OUT_FOR_DELIVERY
  READY_FOR_PICKUP
  DELIVERED
}

model Token {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt DateTime
  createdAt DateTime @default(now())
}
