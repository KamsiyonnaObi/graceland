generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id                     String      @id @default(uuid())
  name                   String
  priceInCents           Int
  imagePath              String
  description            String
  isAvailableForPurchase Boolean     @default(false)
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  color                  String?
  paystack_product_code  String?
  slug                   String?     @unique
  categoryId             String?
  category               Category?   @relation(fields: [categoryId], references: [id])
  images                 Image[]
  orderItems             OrderItem[]
}

model Category {
  id               String     @id @default(uuid())
  name             String
  slug             String     @unique
  parentCategoryId String?
  parentCategory   Category?  @relation("CategoryToCategory", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories    Category[] @relation("CategoryToCategory")

  Product Product[]
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  role          Role      @default(BASIC)
  email         String    @unique
  firstName     String    @default("")
  lastName      String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  verifiedEmail Boolean   @default(false)
  phoneNumber   String?
  addresses     Address[]
  orders        Order[]
  Token         Token[]
}

model Order {
  id                    String          @id @default(uuid())
  totalPriceInCents     Int
  shippingFeeInCents    Int             @default(0)
  taxRate               Float?
  taxesPaid             Float?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  userId                String?
  phoneNumber           String
  pickUpPersonFirstName String?
  pickUpPersonLastName  String?
  shippingAddressId     String?
  billingAddressId      String?
  trxref                String          @unique
  paymentInfoId         String?
  orderEmail            String
  deliveryNote          String?
  fullName              String?
  paymentStatus         paymentStatus   @default(PENDING)
  trackingId            String?
  status                orderStatus     @default(CREATED)
  paystackCheckoutCode  String?
  FulfillmentType       FulfillmentType @default(PICKUP)
  billingAddress        Address?        @relation("BillingAddress", fields: [billingAddressId], references: [id])
  paymentInfo           PaymentInfo?    @relation(fields: [paymentInfoId], references: [id])
  shippingAddress       Address?        @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  tracking              TrackingInfo?   @relation(fields: [trackingId], references: [id])
  user                  User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems            OrderItem[]
}

model OrderItem {
  id           String  @id @default(uuid())
  quantity     Int
  priceInCents Int
  productId    String
  orderId      String
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product @relation(fields: [productId], references: [id])
}

model Address {
  id             String   @id @default(uuid())
  address        String
  state          String
  country        String
  zipCode        String?
  userId         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User?    @relation(fields: [userId], references: [id])
  billingOrders  Order[]  @relation("BillingAddress")
  shippingOrders Order[]  @relation("ShippingAddress")
}

model PaymentInfo {
  id              String   @id @default(uuid())
  cardNumberLast4 String
  cardType        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  bank            String?
  channel         String?
  countryCode     String?
  Order           Order[]
}

model TrackingInfo {
  id             String         @id @default(cuid())
  courierName    String
  trackingNumber String?
  status         TrackingStatus
  lastUpdated    DateTime       @default(now())
  driverName     String?
  Order          Order[]
}

model Token {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  BASIC
  ADMIN
}

enum orderStatus {
  CREATED
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELED
  REFUNDED
}

enum paymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum FulfillmentType {
  PICKUP
  SHIPPING
}

enum TrackingStatus {
  IN_TRANSIT
  OUT_FOR_DELIVERY
  READY_FOR_PICKUP
  DELIVERED
}
